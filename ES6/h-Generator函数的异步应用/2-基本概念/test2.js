/*
回调函数 

JavaScript 语言对异步编程的实现，就是回调函数。
所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。
回调函数的英语名字 callback，直译过来就是 "重新调用"。
 */
/* 
读取文件进行处理，是这样写的。
*/
fs.readFile('/etc/passwd', 'utf-8', function(err, data){
    if(err) throw err;
    console.log(data);
});
/*
上面代码中，readFile 函数的第三个参数，就是回调函数，也就是任务的第二段。
等到操作系统返回了 /etc/passwd 这个文件以后，回调函数才会执行。

一个有趣的问题是，为什么 Node 约定，回调函数的第一个参数，必须是错误对象 err（如果没有错误，该参数就是 null）？

原因是执行分成两段，第一段执行完以后，任务所在的上下文环境就已经结束了。
在这以后抛出的错误，原来的上下文环境已经无法捕捉，只能当作参数，传入第二段。
 */




