/*
8.BigInt 数据类型

简介

JavaScript 所有数字都保存成 64 位浮点数，这给数值的表示带来了两大限制。
一是数值的精度只能到 53 个二进制位（相当于 16 个十进制位），大于这个范围的整数，JavaScript 是无法精确表示的，
    这使得 JavaScript 不适合进行科学和金融方面的精确计算。
二是大于或等于2的1024次方的数值，JavaScript 无法表示，会返回Infinite。
*/
// 超过 53 个二进制位的数值，无法保持精度
Math.pow(2, 53) === Math.pow(2, 53) + 1 // true

// 超过 2 的 1024 次方的数值，无法表示
Math.pow(2, 1024) // Infinity

/*
现在有一个提案，引入了一种新的数据类型 BigInt（大整数），来解决这个问题。
BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。

为了与 Number 类型区别，BigInt 类型的数据必须使用后缀n表示。
*/
1234n
1n + 2n // 3n

/*
BigInt 同样可以使用各种进制表示，都要加上后缀n。
*/
0b1101n // 二进制
0o777n // 八进制
0xFFn // 十六进制

/*
typeof运算符对于 BigInt 类型的数据返回bigint。
*/
typeof 123n // 'BigInt'
