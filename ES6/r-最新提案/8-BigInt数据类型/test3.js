/*
运算

数学运算方面，BigInt 类型的+、-、*和**这四个二元运算符，与 Number 类型的行为一致。
除法运算/会舍去小数部分，返回一个整数。
*/
9n / 5n
// 1n

/*
几乎所有的 Number 运算符都可以用在 BigInt，但是有两个除外：
 不带符号的右移位运算符>>> 和 一元的求正运算符+，使用时会报错。
 前者是因为>>>运算符是不带符号的，但是 BigInt 总是带有符号的，导致该运算无意义，完全等同于右移运算符>>。
 后者是因为一元运算符+在 asm.js 里面总是返回 Number 类型，为了不破坏 asm.js 就规定+1n会报错。
*/
/*
Integer 类型不能与 Number 类型进行混合运算。
*/
1n + 1.3 // 报错
/*
上面代码报错是因为无论返回的是 BigInt 或 Number，都会导致丢失信息。
比如(2n**53n + 1n) + 0.5这个表达式，如果返回 BigInt 类型，0.5这个小数部分会丢失；
如果返回 Number 类型，有效精度只能保持 53 位，导致精度下降。
*/

/*
asm.js 里面，|0跟在一个数值的后面会返回一个32位整数。
根据不能与 Number 类型混合运算的规则，BigInt 如果与|0进行运算会报错。
*/
1n | 0 // 报错


/*
相等运算符（==）会改变数据类型，也是不允许混合使用。
*/
0n == 0
// 报错 TypeError

0n == false
// 报错 TypeError

/*
精确相等运算符（===）不会改变数据类型，因此可以混合使用。
*/
0n === 0
// false

/*
大整数可以转为其他数据类型。
*/
Boolean(0n) // false
Boolean(1n) // true
Number(1n)  // 1
String(1n)  // "1"

!0n // true
!1n // false

/*
大整数也可以与字符串混合运算。
*/
'' + 123n // "123"
