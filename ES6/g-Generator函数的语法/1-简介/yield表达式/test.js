/*
yield 表达式

由于 Generator 函数返回的遍历器对象，只有调用 next方法才会遍历下一个内部状态，
所以其实提供了一种可以暂停执行的函数。
yield表达式就是暂停标志。
 */

/*
遍历器对象的 next() 方法的运行逻辑如下。
（1）遇到 yield表达式，就暂停执行后面的操作，并将紧跟在 yield后面的那个表达式的值，作为返回的对象的value属性值。
 
（2）下一次调用 next方法时，再继续往下执行，直到遇到下一个 yield表达式。

（3）如果没有再遇到新的 yield表达式，就一直运行到函数结束，直到 return语句为止，
    并将 return语句后面的表达式的值，作为返回的对象的 value属性值。

（4）如果该函数没有 return 语句，则返回的对象的 value属性值为 undefined。

需要注意的是，yield表达式后面的表达式，只有当调用 next方法、内部指针指向该语句时才会执行，
因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。
 */
function* gen(){
    yield 123 + 456;
}
/*
上面代码中，yield后面的表达式 123 + 456，不会立即求值，只会在 next方法将指针移到这一句时，才会求值。
 */











