/*yield表达式与 return语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到 yield，函数暂停执行，下一次再从该位置继续向后执行，而 return语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）return语句，但是可以执行多次（或者说多个）yield表达式。正常函数只能返回一个值，因为只能执行一次 return；Generator 函数可以返回一系列的值，因为可以有任意多个 yield。从另一个角度看，也可以说 Generator 生成了一系列的值，这也就是它的名称的来历（英语中，generator 这个词是“生成器”的意思）。 *//*Generator 函数可以不用 yield表达式，这时就变成了一个单纯的暂缓执行函数。 */function* f(){    console.log('执行了！');}var generator = f();setTimeout(function(){    generator.next();}, 2000);/*上面代码中，函数 f如果是普通函数，在为变量 generator赋值时就会执行。但是，函数 f是一个 Generator 函数，就变成只有调用 next方法时，函数 f才会执行。 */