/*
	3.对象属性中的 this

	注意：这里指的是如下的形式，不要把它和 对象方法中的 this搞混；对象方法中的 this,要规划到 函数上下文的 this中； 

	Node环境下：
		
		严格模式下：{}

		非严格模式下： {}
 */
'use strict'
var obj = {
	a: 1,
	b: 2,
	c: this,
	sayHi: function(){
		console.log('Hi');
	}
}

console.log(obj.c);	// {}

/*
	分析：

		其实，这样的对象字面量的形式，可能看起来会有些困惑，我们可以变形来分析；因为对象字面量的形式，实际上是由如下的形式简化而来的写法；

		var obj = new Object();
		obj.a =1;
		obj.b = 2;
		obj.c = this;
		obj.sayHi = function(){
			console.log('Hi');
		}
		
		这样看来就清晰很多了，上边这段代码执行的时候，不就是把全局执行上下文的环境对象赋给 obj.c 属性吗，关于 Node中全局上下文的环境对象 为 一个新对象{},我们已经介绍过了；

		而且结果，也正符合我们此时所得出的结果；

		所以，这样作为对象中的 this,可以规到全局执行上下文中的 this 一类中，this 指向 全局执行上下文的环境对象{};
*/
/*
	一个例子，可能没有什么说服力，我们再来个嵌套形式的 来证实我们的结论， 如下：
 */
var o1 = {
	a: 1,
	b: this,
	o2: {
		a: 1,
		b: this
	}
}

console.log(o1.o2.b); // {}
/*
	结果依然是 {}, 其实 如上的形式，可以变形为：

	var o1 = new Object();
	o1.a = 1,
	o1.b = this;
	o1.o2 = new Object();
	o1.o2.a = 1;
	o1.o2.b = this;
	
	上面这段代码 在执行时，它的执行上下文的环境对象依然是 全局上下文的环境对象；所以说 this依然指向 {}；

 */

/*
	概括：对象属性中的 this指向为 全局执行上下文的环境对象{}；
*/